"set tags+=~/.vim/tags
syntax enable
syntax on
set cursorline
hi CursorLine  cterm=NONE   ctermbg=darkred ctermfg=white
hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white
filetype plugin indent on
set t_Co=256
set background=dark  "dark light "can switch it to find which is look pretty
set nocompatible                 "some plugin need it
set hlsearch                     "highlight the search
set incsearch                    "move to fit position after one char input
set nobackup                     "won't produce the backup file when save file
set nowritebackup                "won't produce the backup file when save file
set noswapfile                   "won't use swapfile
set hidden                       "can open other file when a file is not saved
set ruler                        "show ruler at the right bottom
set nowrap                       "disable auto newline
set laststatus=2                 "status bar will show anytime
set updatetime=200               "tagbar response 800ms
set showmatch matchtime=0        "show the other bracket
set wmnu wildmode=longest:full   "when in command mode can use auto complete same as bash
set expandtab tabstop=4          "expand the tab to 4 space
set si ai ci cinkeys-=0# cinoptions=g0,:0   "some indent rules
set shiftwidth=4                 "make the indent 4 length
set softtabstop=4                "backspace can del 4 space
set lcs=eol:$,tab:\|\            "display tab to green line
set backspace=indent,eol,start   "better backspace
set fileformats=unix,dos,mac     "line feed different in different mode
set completeopt=menuone,longest
set relativenumber
set number
" 文件被修改时自动载入;
set autoread

"  Gvim quickfix乱码解决方案
function! QfMakeConv()
   let qflist = getqflist()
   for i in qflist
      let i.text = iconv(i.text, "cp936", "utf-8")
   endfor
   call setqflist(qflist)
endfunction
au QuickfixCmdPost make call QfMakeConv()

" 设置文件编码格式
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
language messages zh_CN.utf-8
if has("win32")
 "set fileencoding=chinese
 set fileencoding=gbk
else
 set fileencoding=utf-8
endif

"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"解决consle提示信息输出乱码
language messages zh_CN.utf-8

"新建窗口在右侧
"set splitright

" window 打开最大化;
autocmd GUIEnter * simalt ~x



" Mac / Unix /Linux 最大化;
"if has("gui_running")
"  " GUI is running or is about to start.
"  " Maximize gvim window (for an alternative on Windows, see simalt below).
"  set lines=999 columns=999
"else
"  " This is console Vim.
"  if exists("+lines")
"    set lines=50
"  endif
"  if exists("+columns")
"    set columns=100
"  endif
"endif


"自动缩进 与 c语言风格;
set autoindent
set cindent

" 设置启动目录
cd E:\hgdb-core\


set ignorecase
set smartcase

set clipboard+=unnamed "使用windows的剪贴板
set mouse=a

set foldmethod=syntax "用语法高亮来定义折叠
set foldlevel=100   "启动vim时不要自动折叠代码
set foldcolumn=5    "设置折叠栏的宽度

"自动查找tags
set tags=tags;/
set autochdir

" 开启 -- 去掉只读保护限制;
set modifiable 
set write

let Tlist_Auto_Open=0  "不打开
let Tlist_Show_One_File=1  "只显示当前文件的tags
let Tlist_WinWidth=25      "设置taglist宽度
let Tlist_Exit_OnlyWindow=1 "taglist窗口是最后一个窗口
let Tlist_Use_Left_Window=1 "在Vim窗口右侧显示taglist窗口;
map <F3> :Tlist<CR>

" 添加主题
colorscheme gruvbox

set guioptions-=T              " 去除工具栏
"set guioptions-=m              " 去除顶部的菜单栏
set guioptions-=l              " 去除左边的滚动条
set guioptions-=L              " 去除左边的滚动条
set guioptions-=r              " 去除右边的滚动条
set guioptions-=R              " 去除右边的滚动条
set guifont=Consolas:h11       " 设置字体


" nerdTree快捷键映射
let NERDTreeWinPos='left'
let NERDTreeWinSize=25

map <F2> :NERDTreeToggle<CR>
" 如果最后一个是nerdTree 则自动关闭;
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif


"F5动格式化代码
noremap <F5> :Autoformat<CR>
let g:autoformat_verbosemode=1

" 设置ctrlp 映射;
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_window = 'min:4,max:15'   " 最大匹配15;
let g:ctrlp_max_depth=20
let g:ctrlp_follow_symlinks=1
let g:ctrlp_working_path_mode = 'rw'  "用于支持lcd目录跳转，重建索引;  CtrlPRoot
set wildignore+=*\\node_modules\\*,*.git*,*.svn*,*.zip*,*.exe* " 使用vim的忽略文件

nnoremap <C-f> :CtrlSF<Space>
let g:ctrlsf_default_view_mode = 'compact'
let g:ctrlsf_ackprg='ag'  " ag 速度更快？
let g:ctrlsf_auto_close=0  "设置不自动关闭;
let g:ctrlsf_case_sensitive='no'  "大小写不敏感;
let g:ctrlsf_ignore_dir=['tags', '.git', '.svn']  "忽略tags;
let g:ctrlsf_default_root='cwd'


map <F4> :cclose<CR> :CtrlSFClose<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set cscopequickfix=s-,c-,d-,i-,t-,e-

if has("cscope")
    set csprg=cscope
    set csto=1
    set cst
    set csre
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif

" == s: 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
nmap <S-s> :cs find s <C-R>=expand("<cword>")<CR><CR> :bd<CR> :copen<CR>/<C-R>0<CR>
" == c: 查找调用本函数的函数
nmap <S-c> :cs find c <C-R>=expand("<cword>")<CR><CR> :bd<CR> :copen<CR>/<C-R>0<CR>
" == g: 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
nmap <S-g> :cs find g <C-R>=expand("<cword>")<CR><CR> :bd<CR> :copen<CR>/<C-R>0<CR>
" == d: 查找本函数调用的函数
nmap <S-d> :cs find d <C-R>=expand("<cword>")<CR><CR> :bd<CR> :copen<CR>/<C-R>0<CR>
"" == t: 查找指定的字符串
"nmap <S-t> :cs find t <C-R>=expand("<cword>")<CR><CR>
"" == e: 查找egrep模式，相当于egrep功能，但查找速度快多了
"nmap <S-e> :cs find e <C-R>=expand("<cword>")<CR><CR>
"" == f: 查找并打开文件，类似vim的find功能
"nmap <S-f> :cs find f <C-R>=expand("<cword>")<CR><CR>
"" == i: 查找包含本文件的文件
"nmap <S-i> :cs find i ^<C-R>=expand("<cword>")<CR>$<CR>



"静态代码检查;
" 设置错误符号
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']


" to error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
         Errors
    endif
endfunction
" <Leader>  "\"  + s 
nnoremap <Leader>s :call ToggleErrors()<cr>

set nocompatible              " 去除VI一致性,必须要添加
filetype off                  " 必须要添加

"插件管理
set rtp+=$VIM/vimfiles/bundle/Vundle
call vundle#begin()

" 可以在此次安装插件
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"Plugin 'Valloric/YouCompleteMe'

"Ctrl + P
Bundle 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'dyng/ctrlsf.vim'
Bundle 'brookhong/cscope.vim'

" markdown插件
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" 粘贴板 snips
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" 格式化代码
"Plugin 'Valloric/YouCompleteMe'
Plugin 'Chiel92/vim-autoformat'

" 静态代码检查;
Bundle 'scrooloose/syntastic'

call vundle#end()
filetype plugin indent on
